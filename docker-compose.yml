services:
  # Backend Django + Gunicorn
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn microgrid_monitoring.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - csv_uploads:/app/csv_uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - .env
    depends_on:
      - db
      - redis

  # Celery worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A microgrid_monitoring worker --loglevel=info
    volumes:
      - ./backend:/app
      - csv_uploads:/app/csv_uploads
    env_file: .env
    depends_on:
      - redis
      - web

  # Database
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx (serving frontend + proxy to backend)
  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - csv_uploads:/app/csv_uploads
    depends_on:
      web:
        condition: service_healthy

volumes:
  postgres_data:
  static_volume:
  csv_uploads:
